Serialization & Deserialization
===================================
	- Serialization in Java is a mechanism of writing the state of an object into a byte-stream. 
	- The reverse operation of serialization is called deserialization where byte-stream is converted into an object.
	- The serialization and deserialization process is platform-independent, it means we can serialize an object in a platform and deserialize in different platform.
	- For serializing the object, we call the writeObject() method ObjectOutputStream, and for deserialization we call the readObject() method of ObjectInputStream class.
	
	Rules
	--------
		- Is-a Relationship  :- If a class implements serializable then all its sub classes will also be serializable
		- Has-a Relationship :- If a class has a reference to another class, all the references must be Serializable otherwise serialization process will not be performed. In such case, NotSerializableException is thrown at runtime.
		- If there is any static data member in a class, it will not be serialized because static is the part of class not object.
		- In case of array or collection, all the objects of array or collection must be serializable. If any object is not serialiizable, serialization will be failed.
	
	SerialVersionUID
	---------------------
		The serialization process at runtime associates an id with each Serializable class which is known as SerialVersionUID. It is used to verify the sender and receiver of the serialized object. The sender and receiver must be the same. To verify it, SerialVersionUID is used. The sender and receiver must have the same SerialVersionUID, otherwise, InvalidClassException will be thrown when we deserialize the object. We can also declare our own SerialVersionUID in the Serializable class. To do so, we need to create a field SerialVersionUID and assign a value to it. It must be of the long type with static and final. It is suggested to explicitly declare the serialVersionUID field in the class and have it private also. For example:

		private static final long serialVersionUID=1L;  
	
	Transient
	----------
		- If we don't want to serialize any data member of a class, we can mark it as transient.
		
			class Employee implements Serializable{  
				transient int id;  
				String name;  
				public Student(int id, String name) {  
					this.id = id;  
					this.name = name;  
				}  
			}  
			
			id will not be serialized
			
	Externalizable
	----------------
		The Externalizable interface provides the facility of writing the state of an object into a byte stream in compress format. It is not a marker interface.
		
		public void writeExternal(ObjectOutput out) throws IOException
		public void readExternal(ObjectInput in) throws IOException
			
	************************************************************
	Serializable Class
		import java.io.Serializable;  
		public class Student implements Serializable{  
			int id;  
			String name;  
			public Student(int id, String name) {  
				this.id = id;  
				this.name = name;  
			}  
		}

	Serializing the object
		try{  
			//Creating the object  
			Student s1 =new Student(211,"ravi");  
			
			//Creating stream and writing the object  
			FileOutputStream fout=new FileOutputStream("f.txt");  
			ObjectOutputStream out=new ObjectOutputStream(fout);  
			out.writeObject(s1);  
			out.flush();  
			
			//closing the stream  
			out.close();  
			System.out.println("success");  
		}catch(Exception e){System.out.println(e);}  
		} 
	
	Deserializing the object
		try{  
			//Creating stream to read the object  
			ObjectInputStream in=new ObjectInputStream(new FileInputStream("f.txt"));  
			
			Student s=(Student)in.readObject();  
			//printing the data of the serialized object  
			System.out.println(s.id+" "+s.name);  
			
			//closing the stream  
			in.close();  
		}catch(Exception e){System.out.println(e);}  
		} 

	