Stream API => Create + Process + Consume (Source, Zero or more Intermediate Operations, Terminal Operation)

IntStream Create
	IntStream.of(numberArr)
	IntStream.range(1, 101) // 1..100 i.e. 1 including and excluding 101
	IntStream.rangeClosed(1, 100)  // 1..100
	IntStream.generate(supplier()) // from supplier 

IntStream Process 
	IntStream.of(numberArr).distinct()
	IntStream.of(numberArr).sort()
	IntStream.of(numberArr).limit(3)
	IntStream.of(numberArr).skip(3) // skip first 3
	IntStream.of(numberArr).filter(num -> num % 2 == 0)
	IntStream.of(numberArr).map(num -> num * 2)
	IntStream.of(numberArr).boxed()  // convert each number to int
	
IntStream Consume
	IntStream.range(1, 101).forEach(System.out::println());
	IntStream.range(1, 101).toArray();                           // Collect into Array
	IntStream.range(1, 101).boxed().collect(Collectors.toList()) // Collect into List
	
	IntStream.of(numberArr).anyMatch(num -> num % 2 == 1);  // is any number odd
	IntStream.of(numberArr).allMatch(num -> num % 2 == 1);  // are all numbers odd

Stream from File
	Stream<String> fileStream = Files.lines(Paths.get("sampleFile.txt"));
	fileStream
		.filter(x -> x.length() > 50)
		.forEach(System.out::println);
	fileStream.close();
		
	
Collectors
	// toList
	List<String> empList = employees
							.stream()
							.limit(3)
							.map(Employee::getName)
							.collect(Collectors.toList());
	
	// toSet
	Set<String> empSet = employees
							.stream()
							.limit(3)
							.map(Employee::getName)
							.collect(Collectors.toSet());
							
	// toMap
	Map<String, Employee> empNameMap = employees
							.stream()
							.limit(3)
							.collect(Collectors.toMap(e -> e.getName(), e -> e));
							
	// joining (generate string with delimiter)
	String employees =  employees
							.stream()
							.limit(3)
							.map(Employee::getName)
							.collect(Collectors.joining(", "));
							
	// group By dept
	Map<String, List<Employee>> empListGroupByDept = employees
													.stream()
													.collect(Collectors.groupingBy(e -> e.getDept()));
													
	// count employees in each department
	Map<String, Long> empCountGroupByDept = employees
										.stream()
										.collect(Collectors.groupingBy(Employee::getDept, Collectors.counting());
										
	// many other aggregate functions available
	
Map-Reduce - functional programming model which helps in transforming and aggregating the data
	Map - Transform the data
	Reduce - Aggregate the data
	
	
	Reduce
		T reduce(T identity, BinaryOperator<T> accumulator)
		identity - initial value of type T
		accumulator - function for combining two values
		
		Integer sumResult = Stream.of(2, 4, 6, 9, 1, 3, 7)
							.reduce(0, (a, b) -> a + b);
							
		List<Employee> empList = new ArrayList<Employee>(Arrays.asList(new Employee("Peter", "B", 50000),
																	  new Employee("Bob", "A", 20000),
																	  new Employee("Steve", "A", 6000),
																	  new Employee("Daniel", "C", 20000),
																	  new Employee("Bert", "C", 80000),
																	  new Employee("Chrish", "B", 8000),
																	  new Employee("Jeniffer", "A", 9000)));
		
		// Sum of Salaries for all the employees where grade is A
		int sum = empList.stream().filter(e -> e.getGrade().equals("A")).mapToInt(e-> e.getSalary()).sum();
		System.out.println("Total Sum when grade is A :- " + sum);
		
		// Sum of Salaries for all the employees where grade is A & Salary greater than 7000
		int customReduceSum = empList.stream().filter(e -> e.getGrade().equals("A") && e.getSalary() > 7000).mapToInt(e-> e.getSalary()).reduce((e1, e2) -> e1 + e2).getAsInt();
		System.out.println("Sum when Salary > 7000 & grade is A :- " + customReduceSum);
		

map v/s flatMap
	