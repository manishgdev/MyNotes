ArrayList vs LinkedList
=========================

ArrayList
-----------
	- It is present in the java.util package and provides us dynamic arrays in Java. 
	- It may be slower than standard arrays but can be helpful in programs where lots of manipulation in the array is needed. 
	- We can dynamically add and remove items. It automatically resizes itself.

	- This class uses a dynamic array to store the elements in it. With the introduction of generics, this class supports the storage of all types of objects.
	- Manipulating ArrayList takes more time due to the internal implementation. Whenever we remove an element, internally, the array is traversed and the memory bits are shifted.
	- This class implements a List interface. Therefore, this acts as a list.
	- This class works better when the application demands storing the data and accessing it.

LinkedList
------------
	- Linked List are linear data structures where the elements are not stored in contiguous locations and every element is a separate object with a data part and address part. 
	- The elements are linked using pointers and addresses. Each element is known as a node. 
	- Due to the dynamicity and ease of insertions and deletions, they are preferred over the arrays.
	
	- This class uses a doubly linked list to store the elements in it. Similar to the ArrayList, this class also supports the storage of all types of objects.
	- Manipulating LinkedList takes less time compared to ArrayList because, in a doubly-linked list, there is no concept of shifting the memory bits. The list is traversed and the reference link is changed.
	- This class implements both the List interface and the Deque interface. Therefore, it can act as a list and a deque.
	- This class works better when the application demands manipulation of the stored data.