Strings :-
============
=> String Reversal 
	- Reverse loop on length - String Buffer
	- Reverse loop on length - String Builder
	- Reverse loop on length - Character Array - put character array into a string
		char charArr = new char[string.length()];
		after putting characters in the char array from for loop
		reverseString = new String(charArr);
	- Reverse loop on length - concat() characters to string concat(a.charAt(i))+"")
	- Recursion -  
		if(str.length() == 1){
		   return str;
		} else {
				reverse += str.charAt(str.length()-1) + reverseStringByRecusrsion(str.substring(0,str.length()-1));
				return reverse;
		}
	- reverse() method on StringBuilder or StringBuffer object and then use toString() to convert back to String
	
=> Duplicate in String Array

=> Character Count in word / Repeated Characters in Word / Characters with count more than one in a word

=> Maximum Duplicate Word Count
	- store the character count map
	- write comparator to sort the values of the comparator count map

Numbers :-
=============
=> Find Missing Number in Array of n natural numbers
	- get last number
	- get sum of all the numbers in arrays - actual_total
	- calculate sum of n natural number - expected_total = n * (n-1) /2
	- missing number = expected_total - actual_total

=> Find duplicate number in Array of n natural number (assuming numbers are written in ascending order)
	- get highest number in list (list.size() - 1)
	- get sum of numbers in step 1 - expected_sum
	- get sum of number in list - actual_sum
	- duplicate_number = actual_sum - expected_sum
	
=> Print Reverse of Number
	- get the Number
	- reverse_num = 0
	- loop while number !=0
		- reverse_num = (reverse_num*10) + (number%10)
		- number = number / 10
	- print reverse_num
		
=> LCM of Numbers (Multiple of larger number which is divisible exactly by the smaller number)
	- Approach 1 :-
	given a b
	min = (a < b) ? a : b;
	max = (a > b) ? a : b;
	int x, lcm ;
	for(int i=1; i <= min; i++) {
		x = max * i;
		if(x % min == 0) {
			lcm = x;
			break;
		}
	}
	
	- Approach 2 :- 
	Given a, b
	for(int i = 1; i < a * b; i++) {
		if((i % a == 0) && (i % b == 0)) {
			lcm = i;
			break;
		}
	}
	
	- Approach 3 (While loop) :-
	Given a, b
	max = (a > b) ? a : b;
	while(true) {
		if(max%a==0 && max%b==0) {
			lcm = max;
			break;
		}
		max++;
	}
		
=> GCD / HCF of Number
	- Approach 1 :-
		int GCD(int A, int B) {
			int m = min(A, B), gcd;
			for(int i = m; i > 0; --i) {
				if(A % i == 0 && B % i == 0) {
					gcd = i;
					return gcd;
				}
			}
		}
		
	- Approach 2 (Recursion) - Euclid’s Algorithm :-
		assuming A > B
		int GCD(int A, int B) {
			if(B==0)
				return A;
			else
				return GCD(B, A % B);
		}

=> Modular Multiplicative Inverse / Extended Euclid Algorithm:
	This is the extended form of Euclid’s Algorithm to find GCD of two numbers. GCD(A,B) has a special property that it can always be represented in the form of an equation, i.e., Ax + By = GCD(A, B).
	This algorithm gives us the coefficients (x and y) of this equation which will be later useful in finding the Modular Multiplicative Inverse. These coefficients can be zero or negative in their value. 
	int d, x, y;
	void extendedEuclid(int A, int B) {
		if(B == 0) {
			d = A;
			x = 1;
			y = 0;
		}
		else {
			extendedEuclid(B, A%B);
			int temp = x;
			x = y;
			y = temp - (A/B)*y;
		}
	}
	
=> Co-Prime Numbers
	- If GCD of two numbers = 1 then the numbers are said to co-prime
	
=> Check for Prime Number
	- Approach 1 :-
	traverse through all the numbers from 1 to N and count the number of divisors. If the number of divisors are equal to 2 then the given number is prime otherwise it is not
	int count = 0;
    for( int i = 1;i <= N;++i )
        if( N % i == 0 )
            count++;
	
	- Approach 2 :-
	int count = 0;
	for(int i = 1; i*i <= num; i++) {
		if(num % i == 0) {
			if(i*i == num)
				count++;
			else
				count += 2;
		}
	}
	check count and decide if it is prime or not

=> Perfect Number
	- Sum of Divisors of the Number except the number itself is equal to the number is called a perfect number
	The first perfect number is 6, because 1, 2 and 3 are its proper positive divisors, and 1 + 2 + 3 = 6. Equivalently, the number 6 is equal to half the sum of all its positive divisors: ( 1 + 2 + 3 + 6 ) / 2 = 6.
	int temp = 0;
	for(int i=1; i<=number/2 ;i++){
		if(number%i == 0){
			temp += i;
		}
	}
	if(temp == number){
		System.out.println("It is a perfect number");
		return true;
	} else {
		System.out.println("It is not a perfect number");
		return false;
	}

=> Print two maximum numbers in an array :-
	public void printTwoMaxNumbers(int[] nums){
        int maxOne = 0;
        int maxTwo = 0;
        for(int n:nums){
            if(maxOne < n){
                maxTwo = maxOne;
                maxOne =n;
            } else if(maxTwo < n){
                maxTwo = n;
            }
        }
        System.out.println("First Max Number: "+maxOne);
        System.out.println("Second Max Number: "+maxTwo);
    }

=> Check Number is Binary
	- traverse through the digits of number and if any digit>1 return false
	- loop while number !=0
		- mod = num % 10
		- if (mod > 1) return false;
		- num = num / 10;
	- exit from loop return true
		
=> Fibonacci Series
	- Fib(n) = Fib(n-1) + Fib(n-1)
	Fib(2) = Fib (1) + Fib(0)
	- Declare the array with specific size
	- initialize the 0th and 1st index with 0 and 1 respectively
	- loop from 2 to size of array
	- Fib[i] = Fib[i-1] + Fib[i-2]
	
=> Armstrong Number
	- Number where Sum of (Digit ^ Number of Digit) = Number is known as Armstrong number
	- 371
	- Sum (Digits * Number of Digits) = 3^3 + 7^3 + 1^3 = 9 + 343 + 1 = 371
	

Sorting Algorithms
===============================
	= Bubble Sort (Compare every element in the inner loop to next element in Array and move the largest to end of loop, so that in next iteration inner loop count will be reduced by 1)
		- loop from i = 0 to N-1
			- loop from j = 0 to j = N-i-1
				if Arr[j] > Arr [j+1]
					perform swapping
	
	= Selection Sort
	
	= Insertion Sort
	
	= Merge Sort
		
	= Quick Sort
	
	= Count Sort
	
	
BitOperations :-
==============================
=> Set Bits in a Number :-
	- n = number;
	- loop until n != 0
	- n = n & (n-1) 
	- increment count
	- check n
	- exit from loop return count

